; サンプルキャラクター『カンフーマン』のコンスタンツとステートのファイルです。
;===========================================================================
; コンスタンツ（定数）
;===========================================================================
;---------------------------------------------------------------------------
; ここがキャラの心臓部とも言うべき場所。
; １キャラ単位のライフや大きさなど、標準のステータスを予め決めておく部分。
; このコーナー自体省略出来ません。
;---------------------------------------------------------------------------
; 基本データ
;---------------------------------------------------------------------------
[Data]
life              = 1000   ;ライフ（体力ゲージ）最大値
power             = 3000   ;パワーゲージ最大値（オプション・デフォルトは3000=Lv.3）
attack            = 100    ;攻撃力（デフォルトは１００％）
defence           = 100    ;防御力（デフォルトは１００％）
fall.defence_up   = 50     ;横に倒れている時に一時的に加える防御力（％）
liedown.time      = 60     ;横に倒れている時間（フレーム）
airjuggle         = 15     ;ジャグルポイント限界値（「小ネタ.txt」参照）
sparkno           = 2      ;デフォルトのヒットスパーク（fightfxから）
guard.sparkno     = 40     ;デフォルトのガードスパーク（fightfxから）
KO.echo           = 0      ;ＫＯ時の音声（11,0）にエコーを掛けるか否か（0=掛けない,1=掛ける）
volume            = 0      ;キャラの標準の音量（最小-255・最大255）
IntPersistIndex   = 60     ;次のラウンドへ持ち越せる「Var」のアドレスの範囲を決める（※１）
FloatPersistIndex = 40     ;次のラウンドへ持ち越せる「FVar」のアドレスの範囲を決める（※１）

;---------------------------------------------------------------------------
; ※１：変数のラウンド持ち越し方法
;
; 　変数を次のラウンドへ持ち越したい場合は、↑の
; 　「IntPersistIndex」と「FloatPersistIndex」を使う。
; 　そのやり方はM.U.G.E.Nの説明書にすら載ってないので、ここで例を元に解説。
;
; 　①IntPersistIndex = 23　（Var(23)～Var(59)までを全て次のラウンドへ持ち越せる）
; 　②FloatPersistIndex = 18（FVar(18)～FVar(39)までを全て次のラウンドへ持ち越せる）
;
; 　つまり「Var(**)（Fvar(**)）以降全ての変数を持ち越す」という命令になる。
; 　それ以前のアドレスの変数は全て持ち越さなくなる。
;
; 　全ての変数を持ち越さない場合は、
; 　IntPersistIndexは60以上、FloatPersistIndexは40以上にしておこう。
;
; 　×これはダメ×
; 　　①IntPersistIndex = 10,15,20,25　（15,20,25の部分は意味無し）
; 　　②FloatPersistIndex = 4,16 　　　（16の部分は意味無し）
; 　　これらは最初の数字以外全て無効。
; 
;---------------------------------------------------------------------------
; 改訂前の和訳ＫＦＭではPersistIndexの解釈が無茶苦茶間違ってました。
; 大変失礼致しました。(人・ω・｀)ごめんなさい
; 今回はちゃんと調べて正確な情報を載せてるんで安心してください（苦笑
;---------------------------------------------------------------------------
; サイズ
;---------------------------------------------------------------------------
[Size]
xscale           = 1       ;キャラの横の大きさ（絶対値・float）
yscale           = 1       ;キャラの縦の大きさ（絶対値・float）
ground.back      = 15      ;地上にいる時の「後方の物理的な幅」
ground.front     = 16      ;地上にいる時の「前方の物理的な幅」
air.back         = 12      ;空中にいる時の「後方の物理的な幅」
air.front        = 12      ;空中にいる時の「前方の物理的な幅」
height           = 60      ;キャラの物理的な高さ（高いほど相手は飛び越しにくくなる）
attack.dist      = 160     ;相手がガード態勢に入る最低の距離
proj.attack.dist = 90      ;自分の「Projectile」に対して相手がガード態勢に入る最低の距離
proj.doscale     = 0       ;xscaleとyscaleを「Projectile」にも影響させるか否か（0=させない・1=させる）
head.pos         = -5,-90  ;キャラの標準の頭の座標（Bind系で適用される）
mid.pos          = -5,-60  ;キャラの標準の体中心の座標（Bind系で適用される）
shadowoffset     = 0       ;影のＹ軸方向の位置座標
draw.offset      = 0,0     ;キャラの表示座標（Ｘ軸,Ｙ軸）

;---------------------------------------------------------------------------
; 移動速度
;---------------------------------------------------------------------------
[Velocity]
walk.fwd     = 1.5         ;前進速度（Ｘ軸・[Statedef 20]に適用される）
walk.back    = -2.2        ;後退速度（Ｘ軸・[Statedef 20]に適用される）
run.fwd      = 4.0,0       ;前方に走る速度（Ｘ軸,Ｙ軸・[Statedef 100]に適用される）
run.back     = -4.5,-3.8   ;後方に走る速度（Ｘ軸,Ｙ軸・[Statedef 105]に適用される）
jump.neu     = 0,-5.0      ;垂直ジャンプの速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
jump.back    = -2.55       ;後方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
jump.fwd     = 2.0         ;前方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
runjump.back = -2.55,-8.1  ;後方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
runjump.fwd  = 4,-8.1      ;前方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
airjump.neu  = 0,-8.1      ;空中垂直ジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 45]に適用される）
airjump.back = -2.55       ;空中後方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）
airjump.fwd  = 2.5         ;空中前方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）

;---------------------------------------------------------------------------
; 運動関係
;---------------------------------------------------------------------------
[Movement]
airjump.num     = 0        ;空中ジャンプが出来る回数
airjump.height  = 35       ;空中ジャンプが出来る最低の高度（Ｙ軸）
yaccel          = .28      ;Ｙ軸加速度（重力）
stand.friction  = .85      ;立っている時の摩擦係数（ステートのPhysicsが「S」の時）
crouch.friction = .82      ;しゃがんでいる時の摩擦係数（ステートのPhysicsが「C」の時）

;===========================================================================
; ステート
;===========================================================================
;---------------------------------------------------------------------------
; ここからはキャラのそれぞれの行動（ステート）を設定する。
; 番号（ステートナンバー）に気を付ければ良いだけで、
; 行動の決め方もステートの数も作りたいキャラによって自由。
;
; 本来ステートは別のファイルとして扱っているものだけど、
; このようにコンスタンツファイルと一緒にまとめる事も可能。
;
; ステートの基本的な設定はおまけフォルダの「テンプレート.txt」を参照。
;===========================================================================
; 基本行動
;===========================================================================
;---------------------------------------------------------------------------
;タイムオーバー（負けた時）
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 無敵]
type = NotHitBy
trigger1 = 1 ;トリガーを何も書かず「1」にする事により、『無条件で常に実行させる命令』になる。
value = SCA
time = 1

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;イントロ（試合開始前の登場演出アクション）
[Statedef 191]
type = S
ctrl = 0
anim = 190
velset = 0,0

[State 191, アニメ変更];バトル画面に切り替わった瞬間のフェードインの時、アニメを固定している
type = ChangeAnim
trigger1 = RoundState = 0
value = 190

[State 191, 特殊効果];試合が開始するまではこのコントローラを使おう（※２）
type = AssertSpecial
trigger1 = 1
flag = Intro ;イントロの状態

[State 191, ステート変更];アニメーションが終われば「通常立ち」のステートに変更する
type = ChangeState
trigger1 = AnimTime = 0
value = 0

;これがカンフーマンが蹴る板。カンフーマンのステートをあなたのキャラに使うなら、
;下にある二つの「Explod」のステートコントローラを消してお使いください。



;---------------------------------------------------------------------------
; ※２：AssertSpecial
;
; 　他のコントローラでは設定出来ない『特殊な効果』を指定する命令。
; 　設定したトリガーが有効になってる間だけ一時的に適用される。
;
; 　適用出来るパラメータはこのコントローラを一つ設置する場合、最大３つまで。
; 　書式としては「flag」「flag2」「flag3」を順に加えていく形。
; 　flag2とflag3はオプション。ではその特殊効果を全て紹介。
;
; 　Intro          = イントロ（試合開始前の登場演出アクション）の状態になる。イントロステート専用。
; 　Invisible      = 自分の姿を消す。しかし残像（AfterImage）は消せない。
; 　RoundNotOver   = 現在のラウンドを過ぎない。勝利ポーズ専用。
; 　NoBarDisplay   = ライフバーを非表示にする。
; 　NoBG           = ステージの奥の画像を非表示にし、「真っ黒の背景」にする。
; 　NoFG           = ステージの手前の画像を非表示にする。
; 　NoStandGuard   = 立ちガードが出来なくなる。
; 　NoCrouchGuard  = しゃがみガードが出来なくなる。
; 　NoAirGuard     = 空中ガードが出来なくなる。
; 　NoAutoTurn     = 自動で振り向かない。
; 　NoJuggleCheck  = ジャグルをチェックしない。（ジャグルポイントが減らなくなる）
; 　NoKOSnd        = ＫＯ時の音声（11,0）を鳴らさないようにする。画面中に存在する全員に有効なので注意。
; 　NoKOSlow       = ＫＯ時のスローモーションを無効にする。（ＫＯ直前に有効にしないといけない）
; 　NoShadow       = 自分の影を消す。
; 　GlobalNoShadow = 画面中に存在する全てのプレイヤー（ヘルパーとProjectileも含む）の影を消す。
; 　NoMusic        = 演奏しているＢＧＭを止める。（プラグインによってはＢＧＭがバグるので要注意）
; 　NoWalk         = 歩かない。（前か後ろのキーを入力中コントロールが可能の時に勝手に[Statedef 20]にならない）
; 　TimerFreeze    = タイムカウント（制限時間）を停止する。
; 　UnGuardable    = 自分の全ての攻撃が『ガード不可』になる。
;
;---------------------------------------------------------------------------
;挑発
[Statedef 195]
type = S
movetype = I
physics = S
ctrl = 0
anim = 195
velset = 0,0
sprpriority = 2

[State 195, コントロール]
type = CtrlSet
trigger1 = Time = 40 ;このステートが４０フレームになったら
value = 1            ;キーコントロールが可能になる。

[State 195, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;===========================================================================
; 通常攻撃技
;===========================================================================
;---------------------------------------------------------------------------
; 通常技はそんなに難しいテクニックは使ってないから、
; テンプレートを見ながら確認すれば覚えやすいと思う。
; 基本忘るべからず。
;
; ステートナンバーは、立ち技が２００～２９９、しゃがみ技が４００～４９９、
; ジャンプ技が６００～６９９の間で決めて作るのが一般的。
; しかし強制じゃないので自由に作っちゃってＯＫ。
;---------------------------------------------------------------------------
;立ち弱パンチ
[Statedef 200]
type    = S
movetype= A
physics = S
juggle  = 7
velset = 0,0
ctrl = 0
anim = 200
poweradd = 20
sprpriority = 2


[State 200, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 10, 1


[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 200, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 100, 0
animtype = Light
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 12
sparkno = s88;s88;0
sparkxy = -10, -76
hitsound = s0, 7;= s7, 0
guardsound = 6, 0
ground.type = High
ground.slidetime = 5
ground.hittime  = 10
ground.velocity = 0
airguard.velocity = -1.9,-.8
air.type = High
air.velocity = -1.4,-3
air.hittime = 12
Fall.YVelocity = 0 



[State 1000, 0]
Type = CtrlSet
Trigger1 =  AnimElem = 7
Value = 1


[State 200, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;立ち弱パンチ
[Statedef 201]
type    = S
movetype= A
physics = S
juggle  = 7
velset = 0,0
ctrl = 0
anim = 201
poweradd = 20
sprpriority = 2


[State 201, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 10, 1


[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 201, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 100, 0
animtype = Heavy
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 0
sparkno = s88;0
sparkxy = -10, -76
hitsound = s0, 7;= s7, 0
guardsound = 6, 0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -5,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 201, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1



;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
;立ち強キック
[Statedef 240]
type    = S
movetype= A
physics = S
juggle  = 7
velset = 0,0
ctrl = 0
anim = 240
poweradd = 20
sprpriority = 2


[State 240, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem = 4
value = 10, 2

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk



[State 240, ヒット定義]
type = HitDef
trigger1 = AnimElem = 4
attr = S, NA
animtype  = Medium
damage    = 80
guardflag = MA
pausetime = 0,14
sparkno = s88;1
sparkxy = -10,-60
hitsound = s0, 7;  = 5,2
guardsound = 6,0
ground.type = Low
Fall.YVelocity = 0 
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -6
air.velocity = -2.2,-3.2



[State 240, ステー]
Type = CtrlSet
Trigger1 =  AnimElem = 8
Value = 1


[State 240, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1



;\\\\\\\\\\\\\\\\\\
;立ち弱パンチ
[Statedef 241]
type    = S
movetype= A
physics = S
juggle  = 7
velset = 0,0
ctrl = 0
anim = 241
poweradd = 20
sprpriority = 2


[State 241, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 10, 2

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 241, ヒット定義]
type = HitDef
trigger1 = AnimElem = 4
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 100, 0
animtype = Heavy
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 0
sparkno = s88;0
sparkxy = -10, -76
hitsound = s0, 7;= s7, 0
guardsound = 6, 0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -5,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 241, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;\\\\\\
;立ち強パンチ
[Statedef 210]
type    = S
movetype= A
physics = S
juggle  = 7
poweradd= 65
ctrl = 0
velset = 0,0
anim = 210
sprpriority = -1


[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk



[State 210, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA
animtype  = Medium
damage    = 40
guardflag = MA
pausetime = 0,8
sparkno = s88;1
sparkxy = -10,-70
hitsound = s0, 6;  = 5,2
guardsound = 6,0
ground.type = High
ground.slidetime = 12
ground.hittime  = 13
Fall.YVelocity = 0 
ground.velocity = -2.5
air.velocity = -2.5,-4

[State 210, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1
;\\\\\\\\\\\\\\\\\
[Statedef 250]
type = A
movetype = A
physics = N
ctrl = 0
anim = 250
juggle  = 7

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 250, 音を鳴らす]
type = PlaySnd
trigger1 = Time = 2
value = 10, 3

[State 200, 1]
type = velmul
triggerall = animelemtime(2) < 0
trigger1 = Vel X != 0
x = 0.70

[State 200, 1]
type = velset
triggerall = time = 0
trigger1 = prevstateno = [0,26]
trigger2 = abs(vel x) <= 0.5
x = 0

[State 200, 1]
type = velmul
triggerall = time = 0
trigger1 = var(15)
x = 0.5

[State -2]
type = velset
trigger1 = AnimElem = 2
x = ifelse(vel x > 0,vel x + 2.5,1.5)
y = -5.5;-11

[State 200, 1]
type = veladd
trigger1 = animelemtime(2) >= 0
y = 0.3;0.65

[State 210, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA
damage    = 260,0
animtype = DiagUp
getpower = 63
givepower = 21
guardflag = HA
hitflag = MAF
hitsound = s0,7
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;s88;S8027
guard.sparkno = s88;s88;S8035
sparkxy = 0,-10
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -2,-7.5
air.velocity = -4,-5
Fall.YVelocity = 0 
fall = 1
air.recover = 0
fall.recover = 0
recover = 0
[State 1521, 9]
type = ChangeState
trigger1 = Time > 0 && Pos Y >= 5
value = 609


;[State 630, 4]
;type = ChangeState
;trigger1 = Vel Y > 0
;trigger1 = Pos Y >= 0
;value = 0
;ctrl = 1


;ダッシュキック
[Statedef 260]
type    = S
movetype= A
physics = S
juggle  = 7
poweradd= 65
ctrl = 0
velset = 0,0
anim = 200
sprpriority = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 1
x = 3

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 2
x = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 3
x = 1

[State 200, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 10, 1


[State 200, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 100, 0
animtype = DiagUp
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 0
sparkno = s88;0
sparkxy = -10, -76
hitsound = s0, 7;= s7, 0
guardsound = 6, 0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -5,-4
air.velocity = -4,-5
Fall.YVelocity = 0 
fall = 1
air.recover = 0
fall.recover = 0
recover = 0

[State 200, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;ダッシュキック
[Statedef 270]
type    = S
movetype= A
physics = S
juggle  =7
poweradd= 65
ctrl = 0
velset = 0,0
anim = 210
sprpriority = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 1
x = 3

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 2
x = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 3
x = 1




[State 210, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA
animtype  = Medium
damage    = 40
guardflag = MA
pausetime = 0,8
sparkno = s88;1
sparkxy = -10,-70
hitsound = s0, 6;  = 5,2
guardsound = 6,0
ground.type = High
Fall.YVelocity = 0 
ground.slidetime = 12
ground.hittime  = 13
ground.velocity = -2.5
air.velocity = -2.5,-4


[State 200, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1



;===========================================================================
;---------------------------------------------------------------------------
; ２Ｄ格ゲーでのしゃがみ通常攻撃は空中ガードが不可な作品が結構多い。
; カンフーマンも例外ではなかったみたい。
; ↓のしゃがみ弱パンチのguardflagが「L」のみになってるのに注目。
; 意味は「Low」。相手はこのしゃがみ弱パンチをガードする場合、
; 「しゃがみガードだけしか出来ない」という事になる。
;
; それ以外は簡単。
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
;ジャンプ弱パンチ
[Statedef 600]
type    = A
movetype= A
physics = A
juggle  = 7
poweradd= 11
ctrl = 0
anim = 600
sprpriority = 2

[State 600, 音を鳴らす]
type = PlaySnd
trigger1 = Time = 1
value = 10, 2

[State 600, ヒット定義]
type = HitDef
trigger1 = Time = 0
attr = A, NA ;空中通常打撃（Air, Normal Attack）
damage    = 100
guardflag = HA ;相手はしゃがみガードが出来ない
priority = 3
hitsound = s0,7
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;s88;S8027
guard.sparkno = s88;s88;S8035
sparkxy = 0,-10
ground.type = High;Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -4,-5
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0


[State 1521, 9]
type = ChangeState
trigger1 = Time > 0 && Pos Y >= -8
value = 609


;着地
[Statedef 609]
type = C
movetype = I
physics = C
anim = 642
velset = 0,0

[State 1502, 1]
type = PosSet
trigger1 = Time = 0
Y = 0

[State 1502, 9]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1
;================================-

;---------------------------------------------------------------------------
;シールド（特殊行動）
[Statedef 701] 
type     = U ;前のステートの状態を引き継ぐ
movetype = I
physics  = N
ctrl     = 0
anim     = ifelse(StateType=A,705,ifelse(StateType=C,703,701))

[State 701, 状態変更];自分の状態や体勢などを変えるコントローラ
type = StateTypeSet
trigger1 = StateType = A ;自分が今「空中」の状態なら、
Physics = A              ;「物理的な体勢」を「Ａ」にする。自動で重力が掛かるようになるし、
                         ;「Pos Y」が「0以上」になれば強制的に「着地ステート（[Statedef 52]）」になる。

;こちらは相手のHitDef用
[State 701, 受け止め定義];（※８）
type = ReversalDef
trigger1 = Time = 0
reversal.attr = SCA, AA,AP              ;受け止める相手の攻撃属性を指定
;reversal.attr = SCA, NA,SA,HA,NP,SP,HP ;（↑と意味は同じ）
pausetime     = 0,14
numhits       = 0
sparkno       = -1
sparkxy       = 0,0
hitsound = s0, 7;     = -1,0
P1StateNo     = 702

;こちらは相手のProjectile用
[State 701, 食らい上書き];（※９）
type = HitOverRide
trigger1 = Time = [0,13]
time = 1
attr = SCA, AA,AP              ;上書き出来る相手の攻撃属性を指定
;attr = SCA, NA,SA,HA,NP,SP,HP ;（↑と意味は同じ）
;forceair = 1                  ;上書きしたら「空中状態」にするか否か（デフォルトは０）
stateno = 702                  ;上書き先のステート
;slot = 0                      ;このHitOverRideのスロットナンバー（デフォルトは０）
IgnoreHitPause = 1


[State 701, 軸位置]
type = PosSet
trigger1 = StateType != A
y = 0

[State 701, 移動速度]
type = VelSet
trigger1 = StateType != A
x = 0
y = 0

[State 701, ステート変更]
type = ChangeState
trigger1 = (StateType != A) && (AnimTime = 0)
trigger2 = (StateType = A) && (Time > 19)
value = ifelse(StateType=A,51,ifelse(StateType=C,11,0))
ctrl = 1

;---------------------------------------------------------------------------
; ※８：ReversalDef
;
; 　攻撃判定ボックス（Clsn1）の設置はHitDefを有効にするためだけでなく、
; 　相手の攻撃を受け止める判定を設ける『ReversalDef』にも使う。
;
; 　実際に攻撃を受け止めるには、「attr」の代わりに
;　「reversal.attr」のパラメータを使い、受け止める相手の攻撃属性を指定する。
; 　それ以外はHitDefと設定の仕方が一緒。
;
; 　ReversalDefの設置について二つ注意する事がある。
;
; 　まず、ReversalDefは『Projectileを受け止める事は出来ない』。
; 　あくまでもこのコントローラは「HitDefを受け止めるもの」であるため。
; 
; 　そしてそのHitDefに関係するもう一つの注意点。
;
;　「HitDefを使っている攻撃用ヘルパー」を受け止める場合、
; 　ReversalDefにP2StateNoを設置していたならば
;　『そのヘルパーがそのステートに変わり、相手キャラに分身してしまう』。
; 　波動拳の気弾などにClsn1のあるヘルパーが使われてる場合は明らかにバグになる。
;　「受け止める目標がヘルパーになってしまった場合に、分身するバグを回避する方法」
; 　を自分・相手両方共に駆使する必要がある。コンプリートゲームなら楽だけどね。
;
; 　ちなみに、『MoveReversed』というトリガーは
;　「相手のReversalDef」に「自分のHitDef」が受け止められた時間を計測するトリガー。
; 　逆に「自分のReversalDef」で相手の攻撃を受け止めた事を判断する場合は、
; 　なぜか「MoveHit」が使える。なんでか教えてよエレクバイト先生！（コラ
; 　まぁReversalDefも「攻撃判定を定義する」系統だからなんだろうけどね。
;
;---------------------------------------------------------------------------
; ※９：HitOverRide
;
; 　この命令はその名の如く、攻撃を食らった時
;　『食らい状態を任意のステートで上書きする事が出来る』命令。
; 　これの応用で『ブロッキング』なども作る事が出来る。
;
; 　しかし相手のHitDefに「P2StateNo」がある場合、自分がHitOverRideで
; 　食らい動作を上書き出来る状態なら、
;　『その攻撃を食らわなくなる（相手のHitDefが空振る）』ので注意。
;
;---------------------------------------------------------------------------
;シールド成功
[Statedef 702]
type     = U
movetype = I
physics  = N
ctrl     = 0
velset   = 0,0
anim     = ifelse(StateType=A,706,ifelse(StateType=C,704,702))

[State 702, 音を鳴らす]
type = PlaySnd
trigger1 = Time = 0
value = 0, 0

[State 702, 状態変更]
type = StateTypeSet
trigger1 = StateType = A
Physics = A
IgnoreHitPause = 1





[State 702, コントロール]
type = CtrlSet
trigger1 = Time = 5
value = 1



[State 702, 軸位置]
type = PosSet
trigger1 = StateType != A
y = 0



[State 702, ステート変更]
type = ChangeState
trigger1 = (StateType != A) && (AnimTime = 0)
trigger2 = (StateType = A) && (Time > 19)
value = ifelse(StateType=A,51,ifelse(StateType=C,11,0))
ctrl = 1


[Statedef 800] 
type     = S ;前のステートの状態を引き継ぐ
movetype = I
physics  = S
ctrl     = 0
anim     = 800


[State 440, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1



;===========================================================================
;---------------------------------------------------------------------------
; 木の板を投げる飛び道具技。どこかで似たのを見た事があるのは気のせいだ（ﾏﾃｺﾗ
;
; 攻撃判定のあるオブジェクトを発射する命令である『Projectile』を使う。
; ただし、Win版ではキャラ本体がPalFXで色が変わると
;『Projectileも一緒に色が変わってしまう』というバグが発生する。
; ownpalを付けても無駄。
;
; ちなみに、なぜProjectileの発射物に食らい判定（Clsn2）も付いてるのか？
;「相手のProjectile」と「自分のProjectile」が衝突した場合、
;『相殺（互いに打ち消される事）』させるために付けている。
; 自分のや相手のに無ければ当然すり抜ける。
;
; 他に、変数の面白い使い方をしている。「トリガーの代入」を利用して、Var(5)の値が
;「０フレーム目の瞬間Ｂボタンが押されていたら１、それ以外なら０」になるように設定。
; このVar(5)を他のコントローラ・トリガー・パラメータで呼び出せば、
;『一つのステートだけで必殺技の強弱が付けられるようになる』という処理を実行出来る。
; 値が１になった場合に板投げ以外になれば、０にリセットする処理も
;『常時監視ステート（－２）』にて設定しているので、そっちも見忘れないでね。
;
; 一つのステートで強弱が付けられるテクニック、これ悪咲さん方式（爆
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; ※１０：ヘルパーオブジェクト（Helper）
;
; 　その名の通り本来は『支援キャラクター』を呼び出すコントローラ。
; 　多目的にオブジェクトを画面中に出現させる事が出来る。
;
;　「ヘルパー専用のステートを作る」「用途によっては目的を済ませたら消す」の
; 　二点さえ気を付ければ、後は支援キャラ・エフェクトなどを自由に作れる。
;
; 　で、肝心なHelper用パラメータの説明を。
;
;
; [State 1000, ヘルパーを出す]
; type = Helper
; trigger1 = Time = 0
;
; helpertype = normal    ;ヘルパーの属性。「Normal」ならば画面スクロールの影響を受けず、画面外に出られる。
;                        「Player」なら画面スクロールの影響を受け、画面外に出られない上に、
;                         ヘルパー自体も「プレイヤー」として相手に判断される。
;                         デフォルトはNormal。
;
; name = "Striker"       ;ヘルパーの名前。省略すれば勝手に「(ヘルパーを出した親)'s Helper」という名前になる。
;
; stateno = 12345        ;ヘルパーの最初に向かうステートナンバー。
;
; pos = 0,0              ;ヘルパーの座標（Ｘ軸,Ｙ軸）
;                         postypeに依存。
;
; postype = p1           ;ヘルパーの位置属性（p1・p2・front・back・left・right）
;                         効果については「小ネタ.txt」を参照（PosTypeの違い）
;
; facing = 1             ;ヘルパーの左右の向き（1=そのまま・-1=左右反転）
;                         デフォルトは１。
;
; keyctrl = 0            ;ヘルパーのキーコントロールを可能にするか否か（0=しない・1=する）
;                         1の場合、[Statedef -1]に登録されたステートコントローラを
;                         そのヘルパーにも適用する事が出来る。デフォルトは０。
;
; ownpal = 1             ;ヘルパーの色を独立させるか否か（0=させない,1=させる）
;                         0にすればキャラ本体が「PalFX」などで色を変化させた場合、
;                         ヘルパーオブジェクトも一緒に色が変わってしまう。
;
; supermovetime = 6      ;「SuperPause」での時間停止を無視して有効にする時間を設定。
;                         「小ネタ.txt」を参照。
;
; pausemovetime = 6      ;「Pause」での時間停止を無視して有効にする時間を設定。
;                         「小ネタ.txt」を参照。
;
; ID = 54321             ;ヘルパーのＩＤナンバー。
;                         リダイレクションの「Helper(***),***」などでヘルパーの状況を確認する場合や
;                        「NumHelper」でヘルパーの個数を調べる場合など、『ヘルパーを特定する時』に必要。
;
; size.xscale = 1        ;｝
; size.yscale = 1        ;｝
; size.ground.back = 15  ;｝
; size.ground.front = 15 ;｝
; size.air.back = 10     ;｝これらは全てヘルパーへのサイズ指定（オプション）。
; size.air.front = 10    ;｝
; size.height = 60       ;｝やり方はコンスタンツファイルの[Size]の項目と一緒。
; size.proj.doscale = 0  ;｝
; size.head.pos = -5,-90 ;｝
; size.mid.pos = -5,-60  ;｝
; size.shadowoffset = 0  ;｝
;
;---------------------------------------------------------------------------
; こっちがヘルパー用に設定したステート。
;
; 今回は敢えて簡単にしてるけど、
; ヘルパー専用ステートにも、ヘルパー専用のコントローラやトリガーがある。
; それらも駆使して「Explodで表現出来ないエフェクト画像」など、
; 様々なオブジェクトを画面中に出す事も可能。
;
; ↓のコントローラの種類やトリガーに「Parent」や「Root」が付いているけど、
; これはヘルパー専用の処理。効果自体については「おまけフォルダ」にある
;「小ネタ.txt」を参照してください。（トリガーリダイレクション）
;---------------------------------------------------------------------------
;放り投げるまでの板（ヘルパー用ステート）


;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
; カンフーマンのこのコンスタンツファイルをそのまま使う場合は、
; ここからステートを追加すると整理しやすいでしょう。
;
; ・・・ってエレクバイト先生が言ってるけど、正直使いにくいかも（ﾏﾃｺﾗ
; 冗談です(´・ω:;.:...
;---------------------------------------------------------------------------





;===========================================================================
; 常時監視ステート（－２）
;===========================================================================
;---------------------------------------------------------------------------
; 通常の食らい状態（Statedef 5000～5199間）でも、
; 相手に（「P2StateNo」や「TargetState」等で）制御を奪われても、
; 常に登録したステートコントローラが有効になります。
; サブシステム等を制御する時に重宝するでしょう。
;---------------------------------------------------------------------------

[Statedef -2]



;-----------------------------------
;ここは「パワー溜め」のステートで発生させた「Explod」のエフェクト画像を
;特定の条件が有効になれば消す、という処理をしています。


;-----------------------------------
[State -2, クリップボード]
type = DisplayToClipboard
trigger1 = 1
text = "Cancel=%d, Throw=%d, Button=%d, Body-Distance X=%d,Y=%d \n"
params = var(1),var(2),var(5),floor(P2BodyDist X),floor(P2BodyDist Y)

[State -2, クリップボード（追加専用）]
type = AppendToClipboard
trigger1 = 1
text = "Position X=%d,Y=%d, Velocity X=%f,Y=%f, Hit=%d \n"
params = floor(Pos X),floor(Pos Y),(Vel X),(Vel Y),(MoveHit)

;===========================================================================
; 準常時監視ステート（－３）
;===========================================================================
;---------------------------------------------------------------------------
; こちらは通常の食らい状態以外の「P2StateNo」や「TargetState」等で制御された、
; 作成者が任意に指定した相手側の食らいステートに限り、
; 登録したステートコントローラが有効にはなりません。
; －１や－２と上手く使い分けて行きましょう。
;---------------------------------------------------------------------------

[Statedef -3]

;-----------------------------------
;ここは「ジャンプ」か「バックステップ」をした後に
;着地する音を鳴らす設定をしています。


[State -3, noautoturn]
type = AssertSpecial
trigger1 = 1
flag = noautoturn
ignorehitpause = 1
;-----------------------------------
;ここは「ジャンプ」か「バックステップ」をした後に
;着地する音を鳴らす設定をしています。
[State -3, 2]
type = assertspecial
trigger1 = 1
flag = nostandguard
flag2 = nocrouchguard
flag3 = noairguard

[State -3, 音を鳴らす]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno =52
trigger2 = stateno = 609  ;着地ステート
value = 12, 0

[State -3, 1]
type = PlaySnd
trigger1 = stateno = 100
trigger1 = AnimElem = 2
value = 100,0
channel = 1
loop = 1

[State -3, 1]
type = StopSnd
trigger1 = prevstateno = 100
trigger1 = stateno != 100
trigger2 = movetype = H
channel = 1


[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 200
Flag = NoWalk

[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 240
Flag = NoWalk