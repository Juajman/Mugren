; サンプルキャラクター『カンフーマン』のコンスタンツとステートのファイルです。
;===========================================================================
; コンスタンツ（定数）
;===========================================================================
;---------------------------------------------------------------------------
; ここがキャラの心臓部とも言うべき場所。
; １キャラ単位のライフや大きさなど、標準のステータスを予め決めておく部分。
; このコーナー自体省略出来ません。
;---------------------------------------------------------------------------
; 基本データ
;---------------------------------------------------------------------------
[Data]
life              = 1000   ;ライフ（体力ゲージ）最大値
power             = 3000   ;パワーゲージ最大値（オプション・デフォルトは3000=Lv.3）
attack            = 100    ;攻撃力（デフォルトは１００％）
defence           = 100    ;防御力（デフォルトは１００％）
fall.defence_up   = 50     ;横に倒れている時に一時的に加える防御力（％）
liedown.time      = 60     ;横に倒れている時間（フレーム）
airjuggle         = 15     ;ジャグルポイント限界値（「小ネタ.txt」参照）
sparkno           = 2      ;デフォルトのヒットスパーク（fightfxから）
guard.sparkno     = 40     ;デフォルトのガードスパーク（fightfxから）
KO.echo           = 0      ;ＫＯ時の音声（11,0）にエコーを掛けるか否か（0=掛けない,1=掛ける）
volume            = 0      ;キャラの標準の音量（最小-255・最大255）
IntPersistIndex   = 60     ;次のラウンドへ持ち越せる「Var」のアドレスの範囲を決める（※１）
FloatPersistIndex = 40     ;次のラウンドへ持ち越せる「FVar」のアドレスの範囲を決める（※１）

;---------------------------------------------------------------------------
; ※１：変数のラウンド持ち越し方法
;
; 　変数を次のラウンドへ持ち越したい場合は、↑の
; 　「IntPersistIndex」と「FloatPersistIndex」を使う。
; 　そのやり方はM.U.G.E.Nの説明書にすら載ってないので、ここで例を元に解説。
;
; 　①IntPersistIndex = 23　（Var(23)～Var(59)までを全て次のラウンドへ持ち越せる）
; 　②FloatPersistIndex = 18（FVar(18)～FVar(39)までを全て次のラウンドへ持ち越せる）
;
; 　つまり「Var(**)（Fvar(**)）以降全ての変数を持ち越す」という命令になる。
; 　それ以前のアドレスの変数は全て持ち越さなくなる。
;
; 　全ての変数を持ち越さない場合は、
; 　IntPersistIndexは60以上、FloatPersistIndexは40以上にしておこう。
;
; 　×これはダメ×
; 　　①IntPersistIndex = 10,15,20,25　（15,20,25の部分は意味無し）
; 　　②FloatPersistIndex = 4,16 　　　（16の部分は意味無し）
; 　　これらは最初の数字以外全て無効。
; 
;---------------------------------------------------------------------------
; 改訂前の和訳ＫＦＭではPersistIndexの解釈が無茶苦茶間違ってました。
; 大変失礼致しました。(人・ω・｀)ごめんなさい
; 今回はちゃんと調べて正確な情報を載せてるんで安心してください（苦笑
;---------------------------------------------------------------------------
; サイズ
;---------------------------------------------------------------------------
[Size]
xscale           = 1       ;キャラの横の大きさ（絶対値・float）
yscale           = 1       ;キャラの縦の大きさ（絶対値・float）
ground.back      = 15      ;地上にいる時の「後方の物理的な幅」
ground.front     = 16      ;地上にいる時の「前方の物理的な幅」
air.back         = 12      ;空中にいる時の「後方の物理的な幅」
air.front        = 12      ;空中にいる時の「前方の物理的な幅」
height           = 60      ;キャラの物理的な高さ（高いほど相手は飛び越しにくくなる）
attack.dist      = 160     ;相手がガード態勢に入る最低の距離
proj.attack.dist = 90      ;自分の「Projectile」に対して相手がガード態勢に入る最低の距離
proj.doscale     = 0       ;xscaleとyscaleを「Projectile」にも影響させるか否か（0=させない・1=させる）
head.pos         = -5,-90  ;キャラの標準の頭の座標（Bind系で適用される）
mid.pos          = -5,-60  ;キャラの標準の体中心の座標（Bind系で適用される）
shadowoffset     = 0       ;影のＹ軸方向の位置座標
draw.offset      = 0,0     ;キャラの表示座標（Ｘ軸,Ｙ軸）

;---------------------------------------------------------------------------
; 移動速度
;---------------------------------------------------------------------------
[Velocity]
walk.fwd     = 1.5         ;前進速度（Ｘ軸・[Statedef 20]に適用される）
walk.back    = -2.2        ;後退速度（Ｘ軸・[Statedef 20]に適用される）
run.fwd      = 13.6,0       ;前方に走る速度（Ｘ軸,Ｙ軸・[Statedef 100]に適用される）
run.back     = -4.5,-3.8   ;後方に走る速度（Ｘ軸,Ｙ軸・[Statedef 105]に適用される）
jump.neu     = 0,-5.0      ;垂直ジャンプの速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
jump.back    = -2.55       ;後方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
jump.fwd     = 2.0         ;前方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
runjump.back = -2.55,-8.1  ;後方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
runjump.fwd  = 4,-8.1      ;前方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
airjump.neu  = 0,-8.1      ;空中垂直ジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 45]に適用される）
airjump.back = -2.55       ;空中後方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）
airjump.fwd  = 2.5         ;空中前方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）

;---------------------------------------------------------------------------
; 運動関係
;---------------------------------------------------------------------------
[Movement]
airjump.num     = 0        ;空中ジャンプが出来る回数
airjump.height  = 35       ;空中ジャンプが出来る最低の高度（Ｙ軸）
yaccel          = .28      ;Ｙ軸加速度（重力）
stand.friction  = .85      ;立っている時の摩擦係数（ステートのPhysicsが「S」の時）
crouch.friction = .82      ;しゃがんでいる時の摩擦係数（ステートのPhysicsが「C」の時）

;===========================================================================
; ステート
;===========================================================================
;---------------------------------------------------------------------------
; ここからはキャラのそれぞれの行動（ステート）を設定する。
; 番号（ステートナンバー）に気を付ければ良いだけで、
; 行動の決め方もステートの数も作りたいキャラによって自由。
;
; 本来ステートは別のファイルとして扱っているものだけど、
; このようにコンスタンツファイルと一緒にまとめる事も可能。
;
; ステートの基本的な設定はおまけフォルダの「テンプレート.txt」を参照。
;===========================================================================
; 基本行動
;===========================================================================
;---------------------------------------------------------------------------
;タイムオーバー（負けた時）
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 無敵]
type = NotHitBy
trigger1 = 1 ;トリガーを何も書かず「1」にする事により、『無条件で常に実行させる命令』になる。
value = SCA
time = 1

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------


;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;イントロ（試合開始前の登場演出アクション）
[Statedef 191]
type = S
ctrl = 0
anim = 190
velset = 0,0

[State 191, アニメ変更];バトル画面に切り替わった瞬間のフェードインの時、アニメを固定している
type = ChangeAnim
trigger1 = RoundState = 0
value = 190

;[State 191, 特殊効果];試合が開始するまではこのコントローラを使おう（※２）
;type = AssertSpecial
;trigger1 = 1
;flag = Intro ;イントロの状態

[State 191, ステート変更];アニメーションが終われば「通常立ち」のステートに変更する
type = ChangeState
trigger1 = AnimTime = 0
value = 191

;これがカンフーマンが蹴る板。カンフーマンのステートをあなたのキャラに使うなら、
;下にある二つの「Explod」のステートコントローラを消してお使いください。



;カンフーマンのファイルを使ってあなた自身のキャラを作っているなら、
;同じく下にある二つの「PlaySnd」のステートコントローラを消してお使いください。
;この二つは板を蹴る時の音声を再生します。



;---------------------------------------------------------------------------
; ※２：AssertSpecial
;
; 　他のコントローラでは設定出来ない『特殊な効果』を指定する命令。
; 　設定したトリガーが有効になってる間だけ一時的に適用される。
;
; 　適用出来るパラメータはこのコントローラを一つ設置する場合、最大３つまで。
; 　書式としては「flag」「flag2」「flag3」を順に加えていく形。
; 　flag2とflag3はオプション。ではその特殊効果を全て紹介。
;
; 　Intro          = イントロ（試合開始前の登場演出アクション）の状態になる。イントロステート専用。
; 　Invisible      = 自分の姿を消す。しかし残像（AfterImage）は消せない。
; 　RoundNotOver   = 現在のラウンドを過ぎない。勝利ポーズ専用。
; 　NoBarDisplay   = ライフバーを非表示にする。
; 　NoBG           = ステージの奥の画像を非表示にし、「真っ黒の背景」にする。
; 　NoFG           = ステージの手前の画像を非表示にする。
; 　NoStandGuard   = 立ちガードが出来なくなる。
; 　NoCrouchGuard  = しゃがみガードが出来なくなる。
; 　NoAirGuard     = 空中ガードが出来なくなる。
; 　NoAutoTurn     = 自動で振り向かない。
; 　NoJuggleCheck  = ジャグルをチェックしない。（ジャグルポイントが減らなくなる）
; 　NoKOSnd        = ＫＯ時の音声（11,0）を鳴らさないようにする。画面中に存在する全員に有効なので注意。
; 　NoKOSlow       = ＫＯ時のスローモーションを無効にする。（ＫＯ直前に有効にしないといけない）
; 　NoShadow       = 自分の影を消す。
; 　GlobalNoShadow = 画面中に存在する全てのプレイヤー（ヘルパーとProjectileも含む）の影を消す。
; 　NoMusic        = 演奏しているＢＧＭを止める。（プラグインによってはＢＧＭがバグるので要注意）
; 　NoWalk         = 歩かない。（前か後ろのキーを入力中コントロールが可能の時に勝手に[Statedef 20]にならない）
; 　TimerFreeze    = タイムカウント（制限時間）を停止する。
; 　UnGuardable    = 自分の全ての攻撃が『ガード不可』になる。
;
;---------------------------------------------------------------------------


;===========================================================================
; 通常攻撃技
;===========================================================================
;---------------------------------------------------------------------------
; 通常技はそんなに難しいテクニックは使ってないから、
; テンプレートを見ながら確認すれば覚えやすいと思う。
; 基本忘るべからず。
;
; ステートナンバーは、立ち技が２００～２９９、しゃがみ技が４００～４９９、
; ジャンプ技が６００～６９９の間で決めて作るのが一般的。
; しかし強制じゃないので自由に作っちゃってＯＫ。
;---------------------------------------------------------------------------
;立ち弱パンチ
[Statedef 200]
type    = S
movetype= A
physics = S
juggle  = 2
velset = 0,0
ctrl = 0
anim = 200
poweradd = 20
sprpriority = 2
facep2 = 1

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 200, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 20, 0
animtype = Light
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 8
sparkno = s88;0
sparkxy = -10, -76
hitsound = s2, 0
guardsound = 6, 0
ground.type = High
ground.slidetime = 5
ground.hittime  = 10
ground.velocity = -5
airguard.velocity = -1.9,-.8
air.type = High
Fall.YVelocity = 0 
air.velocity = -1.4,-3
air.hittime = 12

[State 1000, 0]
Type = CtrlSet
Trigger1 =  AnimElem = 6
Value = 1

[State 200, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; 下の「立ち強パンチ」のステートを見てみましょ。
;;立ち弱パンチ
[Statedef 201]
type    = S
movetype= A
physics = S
juggle  = 2
velset = 0,0
ctrl = 0
anim = 201
poweradd = 20
sprpriority = 2
facep2 = 1

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 1000, 0]
Type = CtrlSet
Trigger1 =  AnimElem = 6
Value = 1



[State 200, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA ;立ち通常打撃（Standing, Normal Attack）
damage = 20, 0
animtype = Light
guardflag = MA
hitflag = MAF
priority = 3, Hit
pausetime = 0, 14
sparkno = s88;0
sparkxy = -10, -76
hitsound = s2, 0
guardsound = 6, 0
ground.type = High
ground.slidetime = 5
ground.hittime  = 10
ground.velocity = 0
airguard.velocity = -1.9,-.8
air.type = High
Fall.YVelocity = 0 
air.velocity = -1.4,-3
air.hittime = 12

[State 210, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1
;「Width」のコントローラは相手や画面端を押すための『物理的な幅』を
; 一時的に伸ばしたり縮ませたりする命令。
; キャラの幅はバトル中に「Ctrl+C」を押して「判定ボックス」を表示させてる時に
; 一緒に確認出来る。「軸位置から伸びる黄緑色の線」がその幅。
;
; 後は「ChangeAnim」を使って５枚目で攻撃を当てたらすぐに６枚目に
; コマを進ませる命令をしてたり、
;『画像表示優先度』で「振りかぶる時は奥」「振り切った直後から手前」に
; モーション表示の操作をしてるくらいで、難しくない処理。
;
; これは余談だけど、Widthの読み方は「ウィッズ」。
; この解説文書いた時に初めて読み方知ったよ！　｡ﾟ(ﾟつД`ﾟ)ﾟ｡
;---------------------------------------------------------------------------
;立ち強パンチ
[Statedef 210]
type    = S
movetype= A
physics = S
juggle  = 10
poweradd= 65
ctrl = 0
velset = 0,0
anim = 210
sprpriority = -1




[State 640, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem = 5
value = 9, 2


[State 210, ヒット定義]
type = HitDef
trigger1 = AnimElem = 3
attr = S, NA
damage    = 160,24
animtype = Heavy
getpower = 63
givepower = 21
guardflag = HA
hitflag = MAF
hitsound = s5,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -5,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0


[State 210, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;立ち弱キック
[Statedef 230]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 22
ctrl = 0
velset = 0,0
anim = 230
sprpriority = 2

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 1000, 0]
Type = CtrlSet
Trigger1 =  AnimElem = 8
Value = 1

[State 230, ヒット定義]
type = HitDef
trigger1 = Time = 0
attr = S, NA
animtype  = Medium
damage    = 50,0
guardflag = MA
pausetime = 0,15
sparkno = s88;0
sparkxy = -10,-37
hitsound   = s5,0
guardsound = 6,0
ground.type = Low
ground.slidetime = 10
ground.hittime  = 11
ground.velocity = 0
Fall.YVelocity = 0 
air.velocity = -2.5,-3.5

[State 230, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;立ち強キック
[Statedef 240]
type    = U
movetype= A
physics = S
juggle  = 10
poweradd= 65
ctrl = 0
velset = 0,0
anim = 240
sprpriority = 2

[State 240, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 9, 3

[State 1000, 0]
Type = AssertSpecial
Trigger1 = Time = 0
Flag = NoWalk


[State 240, ヒット定義5]
type = HitDef
trigger1 = AnimElem=4
trigger2 = AnimElem=12
attr = S, NA
animtype  = Medium
damage    = 30
guardflag = MA
pausetime = 0,12
sparkno = s88;s88
sparkxy = -10,-60
hitsound   = s5,0
guardsound = 6,0
ground.type = Low
Fall.YVelocity = 0 
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = 0
air.velocity = -2.2,-3.2

[State 240, ヒット定義6]
type = HitDef
trigger1 = AnimElem=6
trigger2= AnimElem=14
attr = S, NA
animtype  = Medium
damage    = 30
guardflag = MA
pausetime = 0,12
sparkno = s88;s88
sparkxy = -10,-60
hitsound   = s3,0
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = 0
Fall.YVelocity = 0 
air.velocity = -2.2,-3.2

[State 240, ヒット定義7]
type = HitDef
trigger1 = AnimElem=8
trigger2= AnimElem=16
attr = S, NA
animtype  = Medium
damage    = 30
guardflag = MA
pausetime = 0,12
sparkno = s88;s88
sparkxy = -10,-60
hitsound   = s2,0
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = 0
air.velocity = -2.2,-3.2
Fall.YVelocity = 0 

[State 240, ヒット定義8]
type = HitDef
trigger1= AnimElem=10
attr = S, NA
animtype  = Medium
damage    = 30
guardflag = MA
pausetime = 0,12
sparkno = s88;s88
sparkxy = -10,-60
hitsound   = s5,0
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = 0
air.velocity = -2.2,-3.2
Fall.YVelocity = 0 

[State 240, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 241
ctrl = 1

;立ち強キック
[Statedef 241]
type    = U
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = 0
velset = 0,0
anim = 241
sprpriority = 2





[State 241, ヒット定義]
type = HitDef
trigger1 = AnimElem = 1
attr = S, NA
damage    = 30,0
animtype = Heavy
getpower = 70
givepower = 21
guardflag = MA
hitflag = MAF
hitsound = s5,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -4,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0
[State 241, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;\\\\\\\\\\
;ダッシュヒジ
[Statedef 250]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = 0
velset = 0,0
anim = 250
sprpriority = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 1
x = 3

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 2
x = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 3
x = 1



[State 1521, 7]
type = HitDef
trigger1 = AnimElem = 1
attr = S, NA
damage    = 60,0
animtype = Heavy
getpower = 63
givepower = 21
guardflag = MA
hitflag = MAF
hitsound = s5,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -2,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 230, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1
;\\\\\\\\\\\



;ダッシュキック
[Statedef 260]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = 0
velset = 0,0
anim = 260
sprpriority = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 1
x = 3

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 2
x = 2

[State 300, 軸位置移動]
type = VelAdd
trigger1 = AnimElem = 3
x = 1

[State 240, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem= 4
value = 9, 1

[State 1521, 7]
type = HitDef
trigger1 = AnimElem = 1
attr = S, NA
damage    = 30,0
animtype = Heavy
getpower = 63
givepower = 21
guardflag = MA
hitflag = MAF
hitsound = s5,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -4,-2
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 230, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;===========================================================================
;---------------------------------------------------------------------------
; ２Ｄ格ゲーでのしゃがみ通常攻撃は空中ガードが不可な作品が結構多い。
; カンフーマンも例外ではなかったみたい。
; ↓のしゃがみ弱パンチのguardflagが「L」のみになってるのに注目。
; 意味は「Low」。相手はこのしゃがみ弱パンチをガードする場合、
; 「しゃがみガードだけしか出来ない」という事になる。
;
; それ以外は簡単。
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; 誰もが攻撃手段としてお世話になる「足払い」はダウン属性の攻撃。
; 実際に足払いの効果にするにはground.typeを「Trip」に、
; fallを「1」にする必要がある。もちろん当たればジャグルポイントも消費。
;
; ここで一つ補足。ground.typeが「Trip」になっている場合、
; 攻撃力や防御力に関係無く転ばした後に続く攻撃（「コンボ」など）が
;『全て無条件でダメージに補正が掛かる』。
; 必ず通常の半分のダメージ量に下がるので注意。
;---------------------------------------------------------------------------
;しゃがみ強キック（足払い攻撃）
[Statedef 440]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 70
ctrl = 0
anim = 440
sprpriority = 2



[State 440, ヒット定義]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 30
hitflag = MAFD
guardflag = L
pausetime = 0,12
sparkno = s88;1
sparkxy = -5,-10
hitsound   = s5,0
guardsound = 6,0
ground.type = Trip ;この攻撃を食らうと相手は吹っ飛べば「転ぶアニメ」になる
ground.slidetime = 10
ground.hittime  = 15
ground.velocity = -1.5,-2
Fall.YVelocity = 0 
air.velocity = -1.2,-3
guard.velocity = -5
fall = 1

[State 440, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;===========================================================================
;---------------------------------------------------------------------------
; ジャンプ通常攻撃にChangeStateのコントローラが無いのは、
; Physicsを「A」にしているから。
; おまけフォルダの「小ネタ.txt」を参照。（Physicsの仕組み）
;
; しゃがみ通常技とは逆に、ジャンプ通常技は基本的に「中段属性」の攻撃。
; しゃがみガードが出来ないのが普通なので、guardflagを「HA」にしておくのが定石。
;「立ちガードの需要性」と「空対地のガードの揺さぶりによる駆け引き」を
; プレイヤーに楽しんでもらうための先人達の知恵だね。
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
;ジャンプ弱キック
[Statedef 630]
type    = A
movetype= A
physics = A
juggle  = 3
poweradd= 20
ctrl = 0
anim = 630
sprpriority = 2

[State 630, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem = 2
value = 9, 1


[State 1521, 7]
type = HitDef
trigger1 = AnimElem = 1
attr = A, SA
damage    = 50,0
animtype = Heavy
getpower = 63
givepower = 21
guardflag = HA
hitflag = MAF
hitsound = s3,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = High;Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -4,-5
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 1521, 9]
type = ChangeState
trigger1 = Time > 0 && Pos Y >= -8
value = 609

;---------------------------------------------------------------------------
;急降下蹴り
;弱
[Statedef 640]
type = A
novetype = A
physics = A
anim = 640
velset = 0,0
ctrl = 0
poweradd = 126




[State 1500, 9]
type = ChangeState
trigger1 = AnimTime = 0
value = 641

;突撃
[Statedef 641]
type = A
movetype = A
physics = N
juggle  = 7
anim = 641
velset =  6,5.5

[State 630, 音を鳴らす]
type = PlaySnd
trigger1 = AnimElem = 1
value = 9, 1

[State 1521, 7]
type = HitDef
trigger1 = AnimElem = 1
attr = A, SA
damage    = 50,0
animtype = Heavy
getpower = 63
givepower = 21
guardflag = HA
hitflag = MAFD
hitsound = s3,0
guardsound = S1, 15
pausetime = 0,0
sparkno = s88;S8027
guard.sparkno = s88;S8035
sparkxy = 0,-10
ground.type = High;Low
ground.slidetime = 12
ground.hittime  = 18
;ground.velocity = -8
;air.velocity = -3,-4
ground.velocity = -4,-5
air.velocity = -4,-5
fall = 1
Fall.YVelocity = 0 
air.recover = 0
fall.recover = 0
recover = 0

[State 1501, 1]
type = VelAdd
trigger1 = 1
Y = 0.1




[State 1521, 9]
type = ChangeState
trigger1 =  Time > 0 &&Pos Y >= 0
value = 609

;========================
;着地
[Statedef 609]
type = C
movetype = I
physics = C
anim = 642
velset = 0,0

[State 1502, 1]
type = PosSet
trigger1 = Time = 0
Y = 0

[State 1502, 9]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1
;===========================================================================
; 投げ技
;===========================================================================
;---------------------------------------------------------------------------
; エレクバイトが「作るのが退屈と感じる時もあるよ」って言ってるけど、
; 作り出したら意外とハマって楽しくなる投げ技。
; 投げる相手の正確な座標取りは面倒臭いけどね（コラ
; 投げ用のHitDefはテンプレートと見比べて確認すればわかるはず。
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; こっちは制御を奪った相手の食らいステート。
; 相手の制御を解く場合、「ChangeState」のコントローラにしてしまうと
;「相手が制御を奪われた状態のままになるバグ」が発生してしまう。
; なので必ず『SelfState』で相手のステートに戻し、制御を解除しないといけない。
; そこさえ注意しておけば、自由に相手の食らいモーションを設定出来る。
;
; デバッグ表示中に相手の情報の一部の文字が黄色になったら、それが
; P2StateNoやTargetStateで制御を奪われた状態の証。
; 投げが成功したらCtrl+Dで相手側の情報を確認だ！m9っ｀Д´)
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; ※３：GetHitVar
;
; 　食らってしまった『相手の攻撃の効果』を
; 　自分側が「特殊な変数」に変換して判断するトリガー。
;　「GetHitVar(**)」の『**』に該当する、予め決められているパラメータを全て紹介。
;
; 　大概「相手のHitDefとProjectileのパラメータ」から引き出すので、かなり多い（苦笑
;
;
; 　XVelAdd             = 自分が負けて吹っ飛んだ時の「Ｘ軸方向の加速度(float)」を計測する
; 　YVelAdd             = 自分が負けて吹っ飛んだ時の「Ｙ軸方向の加速度(float)」を計測する
; 　Type                = 自分の「食らいアニメの種類」。（0=None・1=High・2=Low・3=Trip）
; 　AnimType            = 相手のHitDefに設定されている「animtype」を判断する
;                        （0=Light・1=Medium・2=Hard・3=Back・4=Up・5=DiagUp）
; 　GroundType          = 相手のHitDefに設定されている「ground.type」を判断する
; 　AirType             = 相手のHitDefに設定されている「air.type」を判断する
;
; 　Damage              = 相手から食らってしまった「ダメージ量」を計測する
; 　HitCount            = 相手の「現在のヒット数」を計測する
; 　FallCount           = 自分が「地面に激突した回数」を判断する
; 　HitShakeTime        = 自分の「ヒット硬直時間」を計測する
; 　HitTime             = 自分の「食らい時間」を計測する
; 　SlideTime           = 相手のHitDefに設定されている「slidetime」を判断する
; 　CtrlTime            = 相手のHitDefに設定されている「(air)guard.ctrltime」を判断する
; 　RecoverTime         = 横に倒れている時の「起き上がるまでの時間」を判断する
;
; 　XOff                = 相手のHitDefに設定されている「"snap"のＸ軸」を判断する（非推奨）
; 　YOff                = 相手のHitDefに設定されている「"snap"のＹ軸」を判断する（非推奨）
; 　ZOff                = 相手のHitDefに設定されている「"snap"のＺ軸」を判断する？（存在しないので無意味）
;
; 　XVel                = 相手のHitDefに設定されている「Ｘ軸の食らい状態の移動速度」を判断する
; 　YVel                = 相手のHitDefに設定されている「Ｙ軸の食らい状態の移動速度」を判断する
; 　YAccel              = 相手のHitDefに設定されている「yaccel」を判断する
; 　chainID             = 相手のHitDefに設定されている「chainID」を判断する
; 　Guarded             =「相手のコンボでの最後の攻撃をガードした場合」を判断する
; 　IsBound             =「TargetBindで掴まれてる状態」を判断する
;
; 　Fall                = 相手のHitDefに設定されている「fall」を判断する
; 　Fall.Damage         = 相手のHitDefに設定されている「fall.damage」を判断する
; 　Fall.XVel           = 相手のHitDefに設定されている「fall.xvelocity」を判断する
; 　Fall.YVel           = 相手のHitDefに設定されている「fall.yvelocity」を判断する
; 　Fall.Recover        = 相手のHitDefに設定されている「fall.recover」を判断する
; 　Fall.RecoverTime    = 相手のHitDefに設定されている「fall.recovertime」を判断する
; 　Fall.Kill           = 相手のHitDefに設定されている「fall.kill」を判断する
; 　Fall.EnvShake.Time  = 相手のHitDefに設定されている「fall.envshake.time」を判断する
; 　Fall.EnvShake.Freq  = 相手のHitDefに設定されている「fall.envshake.freq」を判断する
; 　Fall.EnvShake.Ampl  = 相手のHitDefに設定されている「fall.envshake.ampl」を判断する
; 　Fall.EnvShake.Phase = 相手のHitDefに設定されている「fall.envshake.phase」を判断する
;
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; ※４：IfElse文
;
; 　条件を『分岐』させ、適用する値を細分化する命令。書式を見てみよう。
; 
; 　　IfElse(■,●,▲)
;
; 　　■ = 分岐させる条件（トリガーを使う）
; 　　● =「■」が『有効な時』に適用する値（真）
; 　　▲ =「■」が『有効ではない時』に適用する値（偽）
;
; 　つまり『もし■が実行されていたら●（真）、そうでない場合は▲（偽）』
; 　という処理の流れになる。
;
; 　M.U.G.E.NでのIfElse文は数式として分類されているので、
; 　●と▲には「数値（数値を適用するトリガー）」しか使えない。
;　（その中に更にIfElse文は何個も追加出来るけどね）
;
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------


;---------------------------------------------------------------------------

;===========================================================================
;---------------------------------------------------------------------------
; 同人格闘ゲーム『メルティブラッド』よりボタン１個で出せる、
; 相手の攻撃を受け流す防御システム。初代無印版に近い仕様にしてます。
; 複数のテクニックの組み合わせで再現出来る。
;
; これを応用して、ストリートファイターⅢの『ブロッキング』、
; 餓狼MOTWの『ジャストディフェンス（ＥＦＺのリコイルガード）』も再現出来る。
;---------------------------------------------------------------------------
;シールド（特殊行動）
[Statedef 701] 
type     = U ;前のステートの状態を引き継ぐ
movetype = I
physics  = N
ctrl     = 0
anim     = ifelse(StateType=A,705,ifelse(StateType=C,703,701))

[State 701, 状態変更];自分の状態や体勢などを変えるコントローラ
type = StateTypeSet
trigger1 = StateType = A ;自分が今「空中」の状態なら、
Physics = A              ;「物理的な体勢」を「Ａ」にする。自動で重力が掛かるようになるし、
                         ;「Pos Y」が「0以上」になれば強制的に「着地ステート（[Statedef 52]）」になる。

;こちらは相手のHitDef用
[State 701, 受け止め定義];（※８）
type = ReversalDef
trigger1 = Time = 0
reversal.attr = SCA, AA,AP              ;受け止める相手の攻撃属性を指定
;reversal.attr = SCA, NA,SA,HA,NP,SP,HP ;（↑と意味は同じ）
pausetime     = 0,14
numhits       = 0
sparkno       = -1
sparkxy       = 0,0
hitsound      = -1,0
P1StateNo     = 702

;こちらは相手のProjectile用
[State 701, 食らい上書き];（※９）
type = HitOverRide
trigger1 = Time = [0,13]
time = 1
attr = SCA, AA,AP              ;上書き出来る相手の攻撃属性を指定
;attr = SCA, NA,SA,HA,NP,SP,HP ;（↑と意味は同じ）
;forceair = 1                  ;上書きしたら「空中状態」にするか否か（デフォルトは０）
stateno = 702                  ;上書き先のステート
;slot = 0                      ;このHitOverRideのスロットナンバー（デフォルトは０）
IgnoreHitPause = 1


[State 701, 軸位置]
type = PosSet
trigger1 = StateType != A
y = 0

[State 701, 移動速度]
type = VelSet
trigger1 = StateType != A
x = 0
y = 0

[State 701, ステート変更]
type = ChangeState
trigger1 = (StateType != A) && (AnimTime = 0)
trigger2 = (StateType = A) && (Time > 19)
value = ifelse(StateType=A,51,ifelse(StateType=C,11,0))
ctrl = 1

;---------------------------------------------------------------------------
; ※８：ReversalDef
;
; 　攻撃判定ボックス（Clsn1）の設置はHitDefを有効にするためだけでなく、
; 　相手の攻撃を受け止める判定を設ける『ReversalDef』にも使う。
;
; 　実際に攻撃を受け止めるには、「attr」の代わりに
;　「reversal.attr」のパラメータを使い、受け止める相手の攻撃属性を指定する。
; 　それ以外はHitDefと設定の仕方が一緒。
;
; 　ReversalDefの設置について二つ注意する事がある。
;
; 　まず、ReversalDefは『Projectileを受け止める事は出来ない』。
; 　あくまでもこのコントローラは「HitDefを受け止めるもの」であるため。
; 
; 　そしてそのHitDefに関係するもう一つの注意点。
;
;　「HitDefを使っている攻撃用ヘルパー」を受け止める場合、
; 　ReversalDefにP2StateNoを設置していたならば
;　『そのヘルパーがそのステートに変わり、相手キャラに分身してしまう』。
; 　波動拳の気弾などにClsn1のあるヘルパーが使われてる場合は明らかにバグになる。
;　「受け止める目標がヘルパーになってしまった場合に、分身するバグを回避する方法」
; 　を自分・相手両方共に駆使する必要がある。コンプリートゲームなら楽だけどね。
;
; 　ちなみに、『MoveReversed』というトリガーは
;　「相手のReversalDef」に「自分のHitDef」が受け止められた時間を計測するトリガー。
; 　逆に「自分のReversalDef」で相手の攻撃を受け止めた事を判断する場合は、
; 　なぜか「MoveHit」が使える。なんでか教えてよエレクバイト先生！（コラ
; 　まぁReversalDefも「攻撃判定を定義する」系統だからなんだろうけどね。
;
;---------------------------------------------------------------------------
; ※９：HitOverRide
;
; 　この命令はその名の如く、攻撃を食らった時
;　『食らい状態を任意のステートで上書きする事が出来る』命令。
; 　これの応用で『ブロッキング』なども作る事が出来る。
;
; 　しかし相手のHitDefに「P2StateNo」がある場合、自分がHitOverRideで
; 　食らい動作を上書き出来る状態なら、
;　『その攻撃を食らわなくなる（相手のHitDefが空振る）』ので注意。
;
;---------------------------------------------------------------------------
;シールド成功
[Statedef 702]
type     = U
movetype = I
physics  = N
ctrl     = 0
velset   = 0,0
anim     = ifelse(StateType=A,706,ifelse(StateType=C,704,702))

[State 702, 音を鳴らす]
type = PlaySnd
trigger1 = Time = 0
value = 0, 0

[State 702, 状態変更]
type = StateTypeSet
trigger1 = StateType = A
Physics = A
IgnoreHitPause = 1





[State 702, コントロール]
type = CtrlSet
trigger1 = Time = 5
value = 1



[State 702, 軸位置]
type = PosSet
trigger1 = StateType != A
y = 0



[State 702, ステート変更]
type = ChangeState
trigger1 = (StateType != A) && (AnimTime = 0)
trigger2 = (StateType = A) && (Time > 19)
value = ifelse(StateType=A,51,ifelse(StateType=C,11,0))
ctrl = 1




[Statedef 800] 
type     = S ;前のステートの状態を引き継ぐ
movetype = I
physics  = S
ctrl     = 0
anim     = 800


[State 440, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1





;===========================================================================
; 常時監視ステート（－２）
;===========================================================================
;---------------------------------------------------------------------------
; 通常の食らい状態（Statedef 5000～5199間）でも、
; 相手に（「P2StateNo」や「TargetState」等で）制御を奪われても、
; 常に登録したステートコントローラが有効になります。
; サブシステム等を制御する時に重宝するでしょう。
;---------------------------------------------------------------------------

[Statedef -2]

[State -2, 変数];板投げ用
type = VarSet
trigger1 = (StateNo != 1300)
var(5) = 0

;-----------------------------------
;ここは「パワー溜め」のステートで発生させた「Explod」のエフェクト画像を
;特定の条件が有効になれば消す、という処理をしています。

[State -2, エフェクトを消す];パワー溜めステート用
type = RemoveExplod
triggerall = NumExplod(130) > 0
                          ;↑はＩＤナンバー「130」のExplodの画面中の数が0よりも多い、
                          ;つまり１枚以上表示されている時
trigger1 = StateNo != 700 ;ステートが７００（パワー溜め）以外の時
trigger2 = MoveType != I  ;MoveTypeが「I（何もしてない）」以外の時
ID = 130                  ;消すExplodの特定のＩＤナンバーを指定

;-----------------------------------
[State -2, クリップボード]
type = DisplayToClipboard
trigger1 = 1
text = "Cancel=%d, Throw=%d, Button=%d, Body-Distance X=%d,Y=%d \n"
params = var(1),var(2),var(5),floor(P2BodyDist X),floor(P2BodyDist Y)

[State -2, クリップボード（追加専用）]
type = AppendToClipboard
trigger1 = 1
text = "Position X=%d,Y=%d, Velocity X=%f,Y=%f, Hit=%d \n"
params = floor(Pos X),floor(Pos Y),(Vel X),(Vel Y),(MoveHit)



;===========================================================================
; 準常時監視ステート（－３）
;===========================================================================
;---------------------------------------------------------------------------
; こちらは通常の食らい状態以外の「P2StateNo」や「TargetState」等で制御された、
; 作成者が任意に指定した相手側の食らいステートに限り、
; 登録したステートコントローラが有効にはなりません。
; －１や－２と上手く使い分けて行きましょう。
;---------------------------------------------------------------------------

[Statedef -3]

[State -3, noautoturn]
type = AssertSpecial
trigger1 = 1
flag = noautoturn
ignorehitpause = 1
;-----------------------------------
;ここは「ジャンプ」か「バックステップ」をした後に
;着地する音を鳴らす設定をしています。
[State -3, 2]
type = assertspecial
trigger1 = 1
flag = nostandguard
flag2 = nocrouchguard
flag3 = noairguard

[State -3, 音を鳴らす]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52  ;着地ステート
trigger2 = stateno = 609  ;着地ステート
value = 12, 0


[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 200
Flag = NoWalk

[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 201
Flag = NoWalk

[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 210
Flag = NoWalk

[State 1000, 0]
Type = AssertSpecial
Trigger1 = stateno = 230
Flag = NoWalk

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
; ■最後に『コモンステート』について■
; コモンステートとは、全キャラ共通の基本動作のステートです。
; 通常は特に変更しない限り、M.U.G.E.N本体のdataフォルダにある
;「common1.cns（コモンステートファイル）」を使います。
;
; しかし、もしもあなたのキャラのステートファイルでcommon1.cnsと同じ番号の
; 基本動作のステートを作った場合は処理が上書きされ、
; common1.cns側の同じ番号のステートは無効になります。
;
; common1.cnsのプログラム優先度は最低に属しているので、
; ステートの作成には番号に注意しないといけません。
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
